---
import { Image } from '@astrojs/image/components';
import './tabs.css';

const speakers = [
        {
          name: "Speaker 1",
          image: "purple-octo-midjourney-2.png",
          url: "https://metagame.wtf/players/luxumbra"
        },
        {
          name: "Speaker 2",
          image: "purple-octo-midjourney.png",
          url: "https://metagame.wtf/players/luxumbra"
        },
        {
          name: "Speaker 3",
          image: "purple-octo-midjourney-2.png",
          url: "https://metagame.wtf/players/luxumbra"
        },
        {
          name: "Speaker 1",
          image: "purple-octo-midjourney-2.png",
          url: "https://metagame.wtf/players/luxumbra"
        },
        {
          name: "Speaker 2",
          image: "purple-octo-midjourney.png",
          url: "https://metagame.wtf/players/luxumbra"
        },
        {
          name: "Speaker 3",
          image: "purple-octo-midjourney-2.png",
          url: "https://metagame.wtf/players/luxumbra"
        },
      ]
---


<!-- Slider main container -->
<div class="speakers-list max-w-7xl">
  <ul class="">
    {speakers && speakers.length > 0 && speakers.map((speaker) => {
      const image = `/assets/images/speakers/${speaker.image}`

      return (
        <li class="rounded-2xl bg-gradient-to-br from-secondary-alt via-secondary-alt to-transparent">
          <a href={speaker.url} class="flex flex-col p-5" title={speaker.name}>
            <Image
              class="rounded-full border-2 border-primary mx-auto"
              src={image}
              aspectRatio={1}
              alt={speaker.name}
              width="100"
              height="100" />
            <span>{speaker.name}</span>
          </a>
        </li>
      )
    })}
  </ul>
</div>

<script>
  const tablist = document.querySelector("ul[role='tablist']") as HTMLElement;
  const tabs = Array.from(tablist.querySelectorAll('a')) as HTMLElement[];
  // eslint-disable-next-line no-undef
  const panels = document.querySelectorAll(".tab-section[role='tabpanel']") as NodeListOf<HTMLElement>;

  const LEFT_ARROW = 'leftarrow';
  const RIGHT_ARROW = 'rightarrow';
  const DOWN_ARROW = 'downarrow';


  const switchTab = (oldTab: HTMLElement, newTab: HTMLElement) => {
    console.log('switching tabs', oldTab, newTab);
    newTab.focus();
    newTab.removeAttribute('tabindex');
    newTab.setAttribute('aria-selected', 'true');

    oldTab.removeAttribute('aria-selected');
    oldTab.setAttribute('tabindex', '-1');

    panels[tabs.indexOf(oldTab)].hidden = true;
    panels[tabs.indexOf(newTab)].hidden = false;
    panels[tabs.indexOf(oldTab)].ariaHidden = 'true';
    panels[tabs.indexOf(newTab)].ariaHidden = 'false';
    panels[tabs.indexOf(newTab)].classList.add('active');
    panels[tabs.indexOf(oldTab)].classList.remove('active');
  };

  window.addEventListener('load', () => {
    tabs.forEach((tab, i) => {
      tab.addEventListener('click', (e) => {
        e.preventDefault();
        let currentTab = tablist.querySelector('[aria-selected]') as HTMLElement;
        if (e.currentTarget !== currentTab) {
          switchTab(currentTab, e.currentTarget as HTMLElement);
        }
      });

      tab.addEventListener('keydown', (e) => {
        const index = tabs.indexOf(e.currentTarget as HTMLElement);
        console.log('key pressed', e.key);
        if (e.key === DOWN_ARROW) {
          e.preventDefault();
          panels[i].focus();
        }

        if (e.key === LEFT_ARROW) {
          e.preventDefault();
          if (tabs[index - 1]) {
            switchTab(e.currentTarget as HTMLElement, tabs[index - 1]);
          }
        }

        if (e.key === RIGHT_ARROW) {
          e.preventDefault();
          if (tabs[index + 1]) {
            switchTab(e.currentTarget as HTMLElement, tabs[index + 1]);
          }
        }
      });
    });
  });
</script>
