---
import { SITE } from "~/config.mjs";
import { getCanonical, getHomePermalink } from "~/utils/permalinks";
import Layout from "~/layouts/PageLayout.astro";
import ThreeD from "~/components/widgets/ThreeD";
import SponsorsSection from "~/components/core/SponsorsSection.astro";
import Markdown from "@astrojs/markdown-component";
import { DateTime } from "luxon";
import socialImage from "~/assets/images/socials/metafest-shared.jpg";
import Plants from "~/components/widgets/Plants.astro";
import { fetchCalendarData } from "~/utils/fetchCalendarEvents";
import { Icon } from "@iconify/react";
// import { AddToCalendarButton as AddToCalButton } from 'add-to-calendar-button-react';
import clsx from "clsx";
import "~/components/widgets/schedule-tabs.css";
import ScheduleItem from "~/components/atoms/ScheduleItem.astro";
import ScheduleItemAlt from "~/components/atoms/ScheduleItemAlt.astro";
import { days } from "~/content/schedule";
import * as bustripContent from "~/content/schedule/schedule-bustrip.md";
import defaultImageSrc from '~/assets/images/socials/metafest-shared.jpg';
import type { ScheduleEventType } from "~/content/schedule";

type TabType = {
  name: string;
  date: TabDateType;
  data: [] | ScheduleEventType[] | any;
};

type TabDateType = {
  from: string;
  to: string;
};

// type EventDayType = {
//   location: string;
//   events: [];
// };

const getCalForBuild = await fetchCalendarData();
const filterDataForTabs = () => {
  if (!getCalForBuild) return;
  const tabs: TabType[] = [
    {
      name: "Warmup Days",
      date: {
        from: "2023-08-11",
        to: "2023-08-15",
      },
      data: [] as ScheduleEventType[],
    },
    {
      name: "Meta/Regen Day",
      date: {
        from: "2023-08-16",
        to: "2023-08-16",
      },
      data: [],
    },
    {
      name: "Coordination/Meta Day",
      date: {
        from: "2023-08-17",
        to: "2023-08-17",
      },
      data: [],
    },
    {
      name: "Unconference Day",
      date: {
        from: "2023-08-18",
        to: "2023-08-18",
      },
      data: [],
    },
    {
      name: "Bus Trip",
      date: {
        from: "2023-08-19",
        to: "2023-08-24",
      },
      data: [] as ScheduleEventType[],
    },
  ];

  const metaRegenDayGrouped = getCalForBuild.data.reduce(
    (grouped: any, event: any) => {
      const day = DateTime.fromISO(event.start.dateTime).toLocaleString(
        DateTime.DATE_SHORT
      );
      if (day.includes("8/16/2023")) {
        (grouped[event.location] = grouped[event.location] || []).push(event);
      }

      return grouped;
    },
    {}
  );

  const coordinationDAODayGrouped = getCalForBuild.data.reduce(
    (grouped: any, event: any) => {
      const day = DateTime.fromISO(event.start.dateTime).toLocaleString(
        DateTime.DATE_SHORT
      );
      if (day.includes("8/17/2023")) {
        (grouped[event.location] = grouped[event.location] || []).push(event);
      }

      return grouped;
    },
    {}
  );

  const unconferenceGrouped = getCalForBuild.data.reduce(
    (grouped: any, event: any) => {
      const day = DateTime.fromISO(event.start.dateTime).toLocaleString(
        DateTime.DATE_SHORT
      );
      if (day.includes("8/18/2023")) {
        (grouped[event.location] = grouped[event.location] || []).push(event);
      }

      return grouped;
    },
    {}
  );

	const warmupDaysEvents = getCalForBuild.data.filter((event) => {
		const eventDate = DateTime.fromISO(event.start.dateTime);

		if (eventDate.day >= 11 && eventDate.day <= 15) {
			return event;
		}
	});

  // filter data for tabs *Meta/Regen Day*, *Coordination/DAO Day*, *The Unconference*
  const metaRegenDay = getCalForBuild.data.filter((event) => {
		const eventDate = DateTime.fromISO(event.start.dateTime);

    if (eventDate.day === 16 && eventDate.month === 8) {
      return event;
    }
  });

  const coordinationDAODay = getCalForBuild.data.filter((event) => {
		const eventDate = DateTime.fromISO(event.start.dateTime);

    if (eventDate.day === 17 && eventDate.month === 8) {
      return event;
    }
  });

  const unconference = getCalForBuild.data.filter((event) => {
		const eventDate = DateTime.fromISO(event.start.dateTime);

    if (eventDate.day === 18 && eventDate.month === 8) {
      return event;
    }
  });

  const warmupDays: ScheduleEventType[] = days.filter((event) => {
    if (event.grouping === "warmup") {
      return event;
    }
  });

  const bustripDays: ScheduleEventType[] = days.filter((event) => {
    if (event.grouping === "bustrip") {
      return event;
    }
  });

  if (warmupDays.length > 0 && warmupDaysEvents.length === 0) {
    tabs[0].data = warmupDays;
  } else if (warmupDays.length > 0 && warmupDaysEvents.length > 0) {
		tabs[0].data = warmupDays.concat(warmupDaysEvents);
	}

  if (metaRegenDay.length > 0) {
    tabs[1].data = metaRegenDay;
  }
  if (coordinationDAODay.length > 0) {
    tabs[2].data = coordinationDAODay;
  }
  if (unconference.length > 0) {
    tabs[3].data = unconference;
  }
  if (bustripContent) {
    tabs[4].data = bustripContent;
  }

  return {
    metaRegenDay,
    coordinationDAODay,
    unconference,
    warmupDays,
    bustripDays,
    tabs: tabs,
  };
};

const tabData = filterDataForTabs();

const meta = {
  title: `${SITE.title}: Full schedule of events`,
  description: "The full schedule of events for MetaFest: Croatia. ",
  canonical: getCanonical(getHomePermalink()),
	image: defaultImageSrc
};
---

<Layout {meta}>
  <div class="pt-16 xl:pt-32"></div>
  <SponsorsSection
    title="Festival Schedule"
    precis="The festival will be held over 3 days, with a variety of events, workshops, and talks. see below..."
    full
    mega
  >
    <div
      class="tabs tabs--horizontal schedule-wrapper w-full mt-8 xl:mt-0 relative mb-32 2xl:mb-80"
    >
      <ol class="tablist schedule-filters flex items-end w-full" role="tablist">
        {
          tabData?.tabs &&
            tabData.tabs.map((tab: TabType, index: number) => {
              const displayDate =
                tab.date.from === tab.date.to
                  ? `${DateTime.fromISO(tab.date.from).toFormat(
                      "d"
                    )} ${DateTime.fromISO(tab.date.from).toFormat("LLL")}`
                  : `${DateTime.fromISO(tab.date.from).toFormat(
                      "d"
                    )} - ${DateTime.fromISO(tab.date.to).toFormat(
                      "d"
                    )} ${DateTime.fromISO(tab.date.to).toFormat("LLL")}`;

              return (
                <li role="presentation" class="tab">
                  <a
                    href={`#tab-section-${index + 1}`}
                    id={`tab${index + 1}`}
										data-tab={index}
                    role="tab"
                    aria-selected={index === 0 ? "true" : "false"}
                    class="text-2xl text-gradient flex flex-col px-3 py-2"
                  >
                    <span class="font-bold">{tab.name}</span>
                    <span>{displayDate}</span>
                  </a>
                </li>
              );
            })
        }
      </ol>
      <div
        class={clsx(
          "tab-content mb-32 flex-nowrap w-full relative overflow-hidden"
          // `grid-cols-${tabData?.tabs.length}`
        )}
      >
        {
          tabData?.tabs &&
            tabData?.tabs.map((tab: TabType, index: number) => {
              return (
                <div
                  class={clsx(
                    "tab-section w-full overflow-y-hidden overflow-x-visible rounded-none",
                    index === 0 ? "active" : "",
                    typeof tab.data === "string" && "tab-section--md",
										index > 0 && index < 4 ? "pt-20 xl:pt-0" : "pt-0 xl:pt-0"
									)}
                  )}
                  id={`tab-section-${index + 1}`}
									data-content={`${index}`}
                  tabindex="-1"
                  role="tabpanel"
                  aria-labelledby={`tab${index + 1}`}
                  aria-hidden={index === 0 ? "false" : "true"}
                  hidden={index === 0 ? false : true}
                >

								{index !== 0 && index < 4 && tab.data && tab.data.length > 0 && (
									<div class="filters absolute top-0 right-0 w-full xl:w-auto">
										<div class="form-control group flex-col-reverse w-full">
											{index !== 0 && <label class="label opacity-0 group-hover:opacity-100 -translate-y-4 group-hover:-translate-y-2 transition-all duration-200 ease-in-out z-0 sr-only xl:not-sr-only"><span class="label-text text-sm">Filter by Location</span></label>}
											<div class={clsx("bg-gradient-to-r from-primary via-accent-alpha-60 to-transparent rounded-md p-[1px] shadow-black shadow-2xl z-10", index === 0 ? "opacity-20 pointer-events-none" : "opacity-100")}>
												<select id={`locationFilter-${index}`} class={clsx("locationFilter select rounded-md bg-secondary-dark-alpha-90 text-primary font-bold w-full xl:w-auto", index === 0 && 'disabled:cursor-not-allowed')} data-tab={index} aria-disabled={index === 0 ? true : false} disabled={index === 0 ? true : false}>
													<option value="">All Locations</option>
													{Array.from(new Set(tab.data.map((event: any) => event.location || 'TBC'))).map((location: any) => (
														<option value={location}>{location}</option>
													))}
												</select>
											</div>
										</div>
									</div>
								)}

									{index === 0 && tab.data && tab.data.length > 0 && (
										<div class="flex flex-col space-y-20">
											{tab.data.filter((event: any) => event.grouping === undefined).length > 0 && (
												<div class="text-left" data-event-type="scheduled">
													<h3>Scheduled Events</h3>
													<ol
														class={clsx(
															"schedule__list tiers flex flex-col xl:grid xl:grid-cols-3 gap-x-0 gap-y-5 xl:gap-5 items-stretch w-full"
														)}
													>
														{tab.data.filter((event: any) => event.grouping === undefined).map((event: any) => {
															return <ScheduleItem event={event} />;
														})}
													</ol>
												</div>
											)}
											{tab.data.filter((event: any) => event.grouping !== undefined).length > 0 && (
												<div class="text-left" data-event-type="unscheduled">
										<h3>Choose your own adventure</h3>
										<ol
											class={clsx(
												"schedule__list tiers flex flex-col xl:grid xl:grid-cols-3 gap-x-0 gap-y-5 xl:gap-5 items-stretch w-full"
											)}
										>
											{tab.data.filter((event: any) => event.grouping !== undefined).map((event: any) => {
												return <ScheduleItemAlt event={event} />;
											})}
										</ol>
									</div>
											)}

								</div>
									)}

                  {index > 0 && tab.data && tab.data.length > 0 ? (
										<div class="flex flex-col space-y-20">
											{Object.entries(tab.data.reduce((groups: any, event: any) => {
												const key = event.location || 'TBC';
												if (!groups[key]) groups[key] = [];

												groups[key].push(event);
												return groups;
											}, {})).map(([location, events]) => (
												<div data-event-location={location} class="location">
													<h3>{location}</h3>
													<ol
														class={clsx(
															"schedule__list tiers flex flex-col xl:grid xl:grid-cols-3 gap-x-0 gap-y-5 xl:gap-5 items-stretch w-full"
														)}
													>
														{(events as any[]).map((event: any) => {
															const now = DateTime.local();
															if (event.grouping !== undefined) {
																return <ScheduleItemAlt event={event} />;
															}

																const start = DateTime.fromISO(event.start);
																const end = DateTime.fromISO(event.end);
																// if (end > now) {
																	return <ScheduleItem event={event} />;
																// }
															// return <ScheduleItem event={event} />;
														})}
													</ol>

													</div>

											))}
										</div>

                  ) : (
                    <>
                      {tab.data && tab.data.rawContent && (
												<div class="markdown-wrapper max-w-3xl mx-auto">
                        <Markdown>{tab.data.rawContent}</Markdown>
												</div>
                      )}
                    </>
                  )}

									{tab.data && tab.data.length === 0 && (
										<div class="flex flex-col items-center justify-center w-full h-full">
                          <p class="text-xl font-bold text-center">
                            Awaiting content for this day. Check back later.{" "}
                          </p>
                        </div>
											)}
                </div>
              );
            })
        }
      </div>
    </div>
  </SponsorsSection>

  <div
    class="absolute h-[50vh] w-full overflow-y-visible z-[9] inset-0 top-auto"
  >
    <div
      class="relative w-full h-full"
      x-data="{shown: false}"
      x-intersect:once="shown = true"
    >
      <Plants />
    </div>
  </div>
  <ThreeD client:visible />
</Layout>

<script>
	if (typeof window !== 'undefined') {
			console.log('loaded');
			const filters = document.querySelectorAll('.locationFilter');
			filters?.forEach((filterElement) => {
				filterElement.addEventListener('change', function(this: HTMLSelectElement) {
					const selectedValue = (this as HTMLSelectElement).value;
					console.log('Select value changed to:', (this as HTMLSelectElement).value);
					const tabNumber = (this as HTMLElement).getAttribute('data-tab');
        	const tabContent = document.querySelector(`[data-content="${tabNumber}"]`);
					console.log('tabContent', {tabContent, tabNumber});
					if (!tabContent) return;

					// Show all items if no location is selected
					if (selectedValue === '') {
						console.log('selectedValue empty');
							tabContent.querySelectorAll('[data-event-location]').forEach(function(item) {
									item.classList.remove('hidden');
									item.classList.remove('isFiltered');
							});
							return;
					}

					// Show only the items with the selected location within the tab content and hide all others
					if (selectedValue !== '' ) {
						console.log('selectedValue', selectedValue);
						tabContent.querySelectorAll('[data-event-location]').forEach(function(item) {
									item.classList.add('hidden');
									item.classList.remove('isFiltered');
							});

						tabContent.querySelectorAll(`[data-event-location="${selectedValue}"]`).forEach(function(item) {
								item.classList.remove('hidden');
								item.classList.add('isFiltered');
						});
						return;
					}

					// tabContent.querySelectorAll(`[data-event-location="${selectedValue}"]`).forEach(function(item) {

					//     item.classList.remove('hidden');
					// });


				})

			})
	}
	</script>

<script>
  const tablist = document.querySelector("[role='tablist']") as HTMLElement;
  const tabs = Array.from(tablist.querySelectorAll("a")) as HTMLElement[];
  const tabContainer = document.querySelector(".tab-content") as HTMLElement;
  // eslint-disable-next-line no-undef
  const panels = document.querySelectorAll(
    ".tab-section[role='tabpanel']"
  ) as NodeListOf<HTMLElement>;
  const heights: number[] = panels.forEach(
    (panel) => panel.offsetHeight
  ) as any;
  // console.log({ heights });
  const LEFT_ARROW = "leftarrow";
  const RIGHT_ARROW = "rightarrow";
  const DOWN_ARROW = "downarrow";

  const switchTab = (oldTab: HTMLElement, newTab: HTMLElement) => {
    newTab.focus();
    newTab.removeAttribute("tabindex");
    newTab.setAttribute("aria-selected", "true");

    oldTab.removeAttribute("aria-selected");
    oldTab.setAttribute("tabindex", "-1");
    // console.log(panels[tabs.indexOf(newTab)].offsetHeight);
    panels[tabs.indexOf(oldTab)].hidden = true;
    panels[tabs.indexOf(newTab)].hidden = false;
    panels[tabs.indexOf(oldTab)].ariaHidden = "true";
    panels[tabs.indexOf(newTab)].ariaHidden = "false";
    panels[tabs.indexOf(newTab)].classList.add("active");
    panels[tabs.indexOf(oldTab)].classList.remove("active");
  };

  window.addEventListener(
    "load",
    () => {
      tabs.forEach((tab, i) => {
        tab.addEventListener("click", (e) => {
          e.preventDefault();
          let currentTab = tablist.querySelector(
            "[aria-selected]"
          ) as HTMLElement;
          if (e.currentTarget !== currentTab) {
            switchTab(currentTab, e.currentTarget as HTMLElement);
          }
        });

        tab.addEventListener(
          "keydown",
          (e) => {
            const index = tabs.indexOf(e.currentTarget as HTMLElement);
            if (e.key === DOWN_ARROW) {
              e.preventDefault();
              panels[i].focus();
            }

            if (e.key === LEFT_ARROW) {
              e.preventDefault();
              if (tabs[index - 1]) {
                switchTab(e.currentTarget as HTMLElement, tabs[index - 1]);
              }
            }

            if (e.key === RIGHT_ARROW) {
              e.preventDefault();
              if (tabs[index + 1]) {
                switchTab(e.currentTarget as HTMLElement, tabs[index + 1]);
              }
            }
          },
          { passive: true }
        );
      });
    },
    { passive: true }
  );
</script>

<!-- <script type="module">
  const fetchSchedule = async () => {
    const response = await fetch('/.netlify/functions/fetch-schedule');
    const scheduleData = await response.json();

    // update the page with the new data
    const scheduleElement = document.getElementById('schedule');
    if (!scheduleElement) return;
    const listElement = scheduleElement.querySelector('ol');
    if (!listElement) return;
    listElement.innerHTML = scheduleData
      .map(
        (event) => `
			<li>
				<h3>${event.title}</h3>
				<p>${event.date}</p>
			</li>
		`
      )
      .join('');
  };

  fetchSchedule();

  setInterval(fetchSchedule, 0.5 * 60 * 1000);
</script> -->
